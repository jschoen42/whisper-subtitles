#####################   uv   ######################

uv self update

uv init -p 3.13

├── .python-version
├── README.md
├── hello.py
└── pyproject.toml

------------------ pyproject.toml -----------------
...
authors = [
  { name="Jürgen Schoenemeyer", email="js007@web.de" },
]
license = {file = "LICENSE"}
...

---------------- define cache drive ---------------

"warning: Failed to hardlink files" =>

sysdm.cpl
 -> Tab "Advanced"
 -> "Environment Variables"
 -> "System variables"

UV_CACHE_DIR -> G:\.uv_cache

uv cache dir

echo $env:UV_CACHE_DIR

--------------------- uv venv ---------------------

uv venv .venv -p 3.13 --prompt .venv
.venv\Scripts\activate
deactivate

├── .venv
│   ├── bin
│   ├── lib
│   └── pyvenv.cfg
├── .python-version
├── README.md
├── hello.py
├── pyproject.toml
└── uv.lock

.venv/pyenv.cfg -> 'prompt = xyz' -> terminal -> (xyz)

----------- uv dependencies -> uv pip  ------------

uv pip install -r requirements.txt

------ uv dependencies -> uv add, uv remove  ------

uv add result orjson arrow xmltodict dicttoxml
uv remove ...

uv add --dev ...

uv add torch<2.5

----------------------

uv lock --upgrade
uv lock --upgrade-package <package>
uv sync

------------------- licenses  ---------------------

uv add pip-licenses
pip-licenses > __licenses.txt
uv remove pip-licenses

----------------- install Python ------------------

uv python list

uv python install 3.11 3.12 3.13
uv python uninstall 3.9

------------------- helper: uv --------------------

uv add -U ...
uv sync

uv run
uv lock

uv pip list
uv pip list --outdated > __outdated.txt

uv tree > __tree.txt
uv tree --no-dev > __tree.txt

----------------- upgrade Python ------------------

uv python list --all-versions
uv python install 3.13.1

uv python uninstall 3.13.0
 -> ruff extention fails !!!

---- for every env

uv venv .venv -p 3.13.1
uv sync

################### pip - venv ####################

python.exe -m venv .venv
.venv\Scripts\activate

------------------- Powershell --------------------

& 'C:\Program Files\_prog\Python311\python.exe' -m venv .venv-3.11
.venv-3.11\Scripts\activate

& 'C:\Program Files\_prog\Python312\python.exe' -m venv .venv-3.12
.venv-3.12\Scripts\activate

& 'C:\Program Files\_prog\Python313\python.exe' -m venv .venv-3.13
.venv-3.13\Scripts\activate

-------------------- Git Bash ---------------------

source .venv/Scripts/activate
deactivate

############### pip - dependencies  ###############

python.exe -m pip install --upgrade pip
pip install pip-tools
pip install setuptools -U
pip-compile -v requirements.in

pip install -r requirements.txt

pip list --outdated

###################################################

pip install pip-licenses
pip-licenses > __licenses.txt
pip uninstall pip-licenses

################# start with py ###################

py -3.10
py -3.11
py -3.12
py -3.13

##################### vscode ######################

%APPDATA%\Code\User\settings.json

###################### git ########################

git init
git remote add origin https://github.com/ ...

git add .
git commit -m "..."
git commit --amend
git commit --am -m "..."  # n x = ONE commit
git rebase -i HEAD~1      # modify/combine message

git commit --amend --no-edit
git push -u origin main

unstage files:
git reset

git log --oneline origin/main
git log --graph --oneline --decorate

git log --name-only --pretty=format:"%h (%ch)"
git log --name-status --pretty=format:"%h [%ai] %D >> '%s'" > __history.txt

git fetch origin
git log origin/main

git diff --name-only HEAD        # changed files since last commit
git diff --name-only origin/main # changed files since last fetch
git diff origin/main -- _prefs/base.yaml
git diff origin/main


git rebase -i HEAD~3
git rebase -i --root
git rebase --abort

local branch -> https://www.youtube.com/watch?v=qY6IooRlNGI
------------
git branch
git branch feature/...
git checkout feature/...
git checkout -  <- toggle main/feature

git checkout main
git merge feature/...

git status

git push -u origin main

git branche -d feature/... (delete)

....
git push origin main feature/...

--- reflog

git reflog --date=iso > __reflog.txt

--- stash

git stash
git stash -u
oder
git stash push
git stash push -m "my_stash_name"

git stash list
git stash show
git stash show -p     # recent stash
git stash show -p 0   # only the last stash

git stash pop
git stash pop 'stash@{n}'

git stash apply 0

### install "git extras"

--- git clone https://github.com/tj/git-extras.git
--- open pwshell as admin in git-extras
--- ./install.cmd "C:\Program Files\_prog\Git"
--- git extras --version

git info
git browse
git summary
git effort

Remove the latest 3 commits
git undo 3

--- merge branch to main

git checkout main
git pull origin main
git merge <branch name>

--- merge branch to main (ours & theirs)

branch will overwrite main without merge

git checkout main
git merge -s ours your-branch
git checkout your-branch .    <- "." is important!
git commit -m "Merging branch 'your-branch' with priority"

or

git checkout your-branch
git merge -s ours your-branch
git checkout main
git merge your-branch
git commit -m "Merging branch 'your-branch' with priority"

###################### mypy #######################

https://github.com/python/typeshed/tree/main/stubs

----------------- pyproject.toml ------------------

[dependency-groups]
dev = [
    "mypy>=1.14.1",
    "lxml-stubs>=0.5.1",
    "pandas-stubs>=2.2.3.241126",
    "types-openpyxl>=3.1.5.20241225",
    "types-pyyaml>=6.0.12.20241230",
    "types-xmltodict>=0.14.0.20241009",
    "types-beautifulsoup4>=4.12.0.20250204",
    "types-python-dateutil>=2.9.0.20241206",
]

[tool.mypy]
python_version = "3.12"
mypy_path = "src"
explicit_package_bases = true
namespace_packages = true

[[tool.mypy.overrides]]
module = "faster_whisper.*"
ignore_errors = true
ignore_missing_imports = true

python _mypy.py src/main.py
 -> main.py and all imported (!) files will be checked

# type: ignore
# type: ignore[attr-defined]

##################### pyright #####################

npm install --global pyright
npm update --global pyright

[tool.pyright]
include = ["src"]
exclude = ["**/node_modules",
    "**/__pycache__",
]
pythonVersion = "3.13"

python _pyright.py src/main.py
 -> only main.py will be checked

python _pyright.py src
-> all (!) files in src will be checked

python _pyright.py src/main
python _pyright.py src/helper
python _pyright.py src/utils
